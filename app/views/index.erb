<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title>jQuery UI: Draggable - jsFiddle demo</title>


  <script type='text/javascript' src='http://code.jquery.com/jquery-1.7.1.js'></script>

  <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">


  <script type="text/javascript" src="jquery.line.js"></script>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.js"></script>


  <link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/themes/overcast/jquery-ui.css">



<script type='text/javascript'>//<![CDATA[






function getOffset( el ) {
    var rect = el.getBoundingClientRect();
    return {
        left: rect.left + window.pageXOffset,
        top: rect.top + window.pageYOffset,
        width: rect.width || el.offsetWidth,
        height: rect.height || el.offsetHeight
    };
}

function connect(div1, div2, color, thickness) { // draw a line connecting elements
    var off1 = getOffset(div1);
    var off2 = getOffset(div2);
    // bottom right
    var x1 = off1.left + off1.width;
    var y1 = off1.top + (off1.height / 2);

    // top right
    var x2 = off2.left;
    var y2 = off2.top + (off2.height / 2);

    // distance
    var length = Math.sqrt(((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1)));
    // center
    var cx = ((x1 + x2) / 2) - (length / 2);
    var cy = ((y1 + y2) / 2) - (thickness / 2);
    // angle
    var angle = Math.atan2((y1-y2),(x1-x2))*(180/Math.PI);
    // make hr

    $('.container').line(x1, y1, x2, y2, {color:color, zindex:1, class:'line', style:'dotted'});
}

</script>


<style>

.sortable_job {
  padding: 10px;
  border-radius: 5px;
  overflow:visible;

}

.sortable_job > li {
  list-style: none;
  margin-bottom: 10px;
  border-radius: 5px;


}

.sortable_sequence {
  padding: 10px;
  border-radius: 5px;

  overflow:visible;
}

.sortable_sequence > li {
  list-style: none;
  margin-bottom: 10px;
  border-radius: 5px;


}

.item {
  padding:20px;
}

.ui-sortable-helper:hover {
  cursor:pointer;

}

.column {
  display: inline-block;

  width: 210px;
  padding: 5px;
  margin-right: 60px;
  background: #EEEEEE;
  border-radius: 5px;
  vertical-align: top;
}

.column-max {
  width: 100%;
  float: left;
  margin-right: 60px;

}

.sortable_orphaned {
  background: #EEEEEE;
  padding: 10px;
  border-radius: 5px;

  overflow:visible;
  float: left;
}

.sortable_orphaned > li {
  float: left;
  margin: 5px;
  width: 180px;

}


.sortable_job_moving {
  background-color: #EAEAEA;
  width: inherited;
  border-radius: 5px;

  width: 100%;
  overflow: auto;
  border: 1px dotted black;

}


.sortable_sequence_moving{
  background-color: #EAEAEA;
  width: inherited;
  border-radius: 5px;

  width: 100%;
  overflow: auto;
  border: 1px dotted black;


}


.flow {
  background: #F4F4F4;
  overflow:auto;
  border-radius: 5px;

  padding: 10px;
  margin-top: 5px;
  float: left;
  width: 100%;
}

.sequence {
  list-style: none;
  background: #DDDDDD;
  border-radius: 5px;

  width: 100%;
  white-space: nowrap;

}

.ui-sortable-helper {

  margin-bottom:10px;
}

.flow {
  overflow-x:auto;
  white-space: nowrap;

}

.item {
  width: 170px;
  white-space: normal;
  display:flex;

}

.navbar {
  border-radius: 0px;

}

</style>

</head>


<body>

  <nav class="navbar navbar-inverse">
    <div class="container-fluid">
      <div class="navbar-header">
        <a class="navbar-brand" href="#">Project name</a>
      </div>

    </div>
  </nav>





<div class="container">
  <div class="page" id="page">
    <ul class="list-unstyled sortable_flow " id="flows">

    </ul>
  </div>
</div>


<div class="container">
  <div class="column-max" id="">
    <h4>Available Tasks</h4>
    <ul class="list-unstyled sortable_job sortable_orphaned" id="orphaned">
    </ul>
  </div>
</div>




<script>


function update_links(color) {
  color = typeof color !== 'undefined' ? color : '#AAAAAA';

  $( ".line" ).remove();

  for(var i in stages_link) {
    for(var i2 in stages_link[i]) {
      if(typeof stages_link[i][(parseInt(i2) + 1)] !== 'undefined') {
        for(var i3 in stages_link[i][i2]) {
          for(var i4 in stages_link[i][(parseInt(i2) + 1)]) {
            connect(document.getElementById('sequence' + stages_link[i][i2][i3]), document.getElementById('sequence' + stages_link[i][(parseInt(i2) + 1)][i4]), color, 3);
          }
        }
      }
    }
  }
}



window.onresize = function() {
  update_links();

};


data = {};


stages_link = {};

function init_workflows() {

  stages_link = {};

  for(var flow in data.flows) {
    if( $('#flow' + data.flows[flow].id).length ) {
      console.log('check position using .index();');
    } else {
      $( "#flows" ).append( '<li class="flow flows" id="flow' + data.flows[flow].id + '"></li>' );
      console.log('does not exists');
    }
    stages_link[data.flows[flow].id] = {};
  }

  stages = {};
  for(var stage in data.stages) {
    $( "#flow" + data.stages[stage].flow_id ).append( '<ul class="list-unstyled sortable_sequence column stages" id="stage' + data.stages[stage].id + '"></ul>' );
    stages_link[data.stages[stage].flow_id][data.stages[stage].id] = [];
    stages[data.stages[stage].id] = data.stages[stage].flow_id;
  }

  for(var sequence in data.sequences) {
    $( "#stage" + data.sequences[sequence].stage_id ).append( '<li class="ui-state-default sequence"><center><h4>' + data.sequences[sequence].title + '</h4></center><ul id="sequence' + data.sequences[sequence].id + '" class="list-unstyled sortable_job sequences"></ul></li>' );
    stages_link[stages[data.sequences[sequence].stage_id]][data.sequences[sequence].stage_id].push(data.sequences[sequence].id);
  }

  for(var job in data.jobs) {
    if (data.jobs[job].sequence_id != 0) {
      $( "#sequence" + data.jobs[job].sequence_id ).append( '<li class="ui-state-default jobs" id="job' + data.jobs[job].id + '"><div class="item">' + data.jobs[job].title + '</div></li>' );
    } else {
      $( "#orphaned" ).append( '<li class="ui-state-default jobs" id="job' + data.jobs[job].id + '"><div class="item">' + data.jobs[job].title + '</div></li>' );
    }
  }

  $( ".flow" ).scroll(function() {
    update_links();
  });
  update_links();

}


function update_workflows() {
  update_links();

  data_ret = {};

  data_ret['jobs'] = [];
  $('.jobs').each(function(i, obj) {
    data_ret['jobs'].push({'id': obj.id.replace('job', ''), 'sequence_id': $('#' +obj.id).parent().closest("ul").attr("id").replace('sequence', '').replace('orphaned', '0'), 'orderkey': $('#' + obj.id).index()});
    //console.log(obj.id + ' --- ' + $('#' +obj.id).parent().closest("ul").attr("id") + ' -- ' + $('#' + obj.id).index());
  });

  data_ret['sequences'] = [];
  $('.sequences').each(function(i, obj) {
    data_ret['sequences'].push({'id': obj.id.replace('sequence', ''), 'stage_id': $('#' +obj.id).parent().closest("ul").attr("id").replace('stage', ''), 'orderkey': $('#' + obj.id).parent().closest("li").index()});
    //console.log(obj.id + ' --- ' + $('#' +obj.id).parent().closest("ul").attr("id") + ' -- ' + $('#' + obj.id).parent().closest("li").index());
  });

  data_ret['stages'] = [];
  $('.stages').each(function(i, obj) {
    data_ret['stages'].push({'id': obj.id.replace('stage', ''), 'flow_id': $('#' +obj.id).parent().closest("li").attr("id").replace('flow', ''), 'orderkey': $('#' + obj.id).index()});
    //console.log(obj.id + ' --- ' + $('#' +obj.id).parent().closest("li").attr("id") + ' -- ' + $('#' + obj.id).index());
  });


  data_ret['flows'] = [];
  $('.flows').each(function(i, obj) {
    data_ret['flows'].push({'id': obj.id.replace('flow', ''), 'orderkey': $('#' + obj.id).index()});
    //console.log(obj.id + ' --- nil -- ' + $('#' + obj.id).index());
  });


  $.ajax({
    type: "POST",
    url: "/api/update",
    dataType: "application/json",
    proccessData: false, // this is true by default

    data : data_ret,
  })
    .done(function( msg ) {
      alert( "Data Saved: " + msg );
    });


}

$.ajax({
  type: "GET",
  url: "/api/all",
})
  .success(function( msg ) {
    data = jQuery.parseJSON(msg);
    init_workflows();

    $(function(){
      $(function() {
        $( ".sortable_job" ).sortable({
          revert: true,
          connectWith: ".sortable_job",
          placeholder: "sortable_job_moving",

          start: function(e, ui){
            ui.placeholder.height(ui.helper[0].scrollHeight);
            update_links('#DDDDDD');
          },
          change: function (e, ui){
            update_links('#DDDDDD');
          },
          stop: function (e, ui){
            update_workflows();
          },
        });
        $( "ul, li" ).disableSelection();
      });

      $(function() {
        $( ".sortable_sequence" ).sortable({
          revert: true,
          placeholder: "sortable_sequence_moving",

          start: function(e, ui){
            ui.placeholder.height(ui.helper[0].scrollHeight);
            update_links('#DDDDDD');
          },
          change: function (e, ui){
            update_links('#DDDDDD');
          },
          stop: function (e, ui){
            update_workflows();
          },
        });
        $( "ul, li" ).disableSelection();
      });

    });//]]>

  });


</script>

</body>

</html>
